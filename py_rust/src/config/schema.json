{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "matchers": {
            "type": "array",
            "description": "Custom template matchers. Zetch will treat any files containing this matcher as a file extension, or intermediary extension as a renderable template. Lower case alphanumeric characters only. Defaults to [\"zetch\"].",
            "default": ["zetch"],
            "items": {
                "type": "string"
            }
        },
        "ignore_files": {
            "type": "array",
            "description": "Files to be loaded as git-style ignore files, the contents of which will be excluded from the template search. Relative paths are resolved relative to the config file's directory.",
            "items": {
                "type": "string"
            }
        },
        "exclude": {
            "type": "array",
            "description": "Git-style glob patterns to exclude from the template search. Effectively allows inlining an ignore file.",
            "items": {
                "type": "string"
            }
        },
        "engine": {
            "type": "object",
            "description": "The rendering engine's configuration.",
            "properties": {
                "block_start": {
                    "type": "string",
                    "description": "The pattern marking the beginning of a block in a template.",
                    "default": "{%"
                },
                "block_end": {
                    "type": "string",
                    "description": "The pattern marking the end of a block in a template.",
                    "default": "%}"
                },
                "variable_start": {
                    "type": "string",
                    "description": "The pattern marking the beginning of a variable in a template.",
                    "default": "{{"
                },
                "variable_end": {
                    "type": "string",
                    "description": "The pattern marking the end of a variable in a template.",
                    "default": "}}"
                },
                "comment_start": {
                    "type": "string",
                    "description": "The pattern marking the beginning of a comment in a template.",
                    "default": "{#"
                },
                "comment_end": {
                    "type": "string",
                    "description": "The pattern marking the end of a comment in a template.",
                    "default": "#}"
                },
                "custom_extensions": {
                    "type": "array",
                    "description": "A list of custom python extensions to load. Each extension must be a Python file or package (dir with an __init__.py) that uses @zetch.register_function to render custom functions which can be used in templates. Relative paths are resolved relative to the config file's directory.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "additionalProperties": false
        },
        "tasks": {
            "type": "object",
            "description": "Tasks that should be run before (pre) or after (post) loading context and rendering templates.",
            "properties": {
                "pre": {
                    "type": "array",
                    "description": "Tasks that should be run before building the final context variables. Will be run on any command requiring the context.",
                    "items": { "$ref": "#/$defs/task" }
                },
                "post": {
                    "type": "array",
                    "description": "Tasks that should be run after loading context and rendering templates. Useful for updating files that don't use the templating system. E.g. a json file that is also modified by other programs. Will be run only on the zetch render command.",
                    "items": { "$ref": "#/$defs/task" }
                }
            },
            "additionalProperties": false
        },
        "context": {
            "type": "object",
            "description": "Global variables to be made available to templates.",
            "properties": {
                "static": {
                    "description": "Statically configured global variables.",
                    "patternProperties": {
                        "^.*$": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "description": "The value of the variable. Can be any valid toml value."
                                },
                                "coerce": {
                                    "type": "string",
                                    "description": "The type to coerce the value to. If not specified, the value kept as defined in the toml.",
                                    "enum": ["json", "str", "int", "float", "bool"]
                                }
                            },
                            "required": ["value"],
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                },
                "env": {
                    "description": "Variables loaded from the environment.",
                    "patternProperties": {
                        "^.*$": {
                            "type": "object",
                            "properties": {
                                "env_name": {
                                    "type": "string",
                                    "description": "The name of the environment variable to load into this context var, this defaults to the name of the config var."
                                },
                                "default": {
                                    "description": "The default value of the variable if the environment variable is not set."
                                },
                                "coerce": {
                                    "type": "string",
                                    "description": "The type to coerce the value to. If not specified, the value is kept as original string from env, or the direct value if default was used.",
                                    "enum": ["json", "str", "int", "float", "bool"]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                },
                "cli": {
                    "description": "Variables loaded from terminal commands.",
                    "patternProperties": {
                        "^.*$": {
                            "type": "object",
                            "properties": {
                                "commands": {
                                    "type": "array",
                                    "description": "The cli commands to prepare the variable. The output of the last command will be used as the value of the variable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "minItems": 1
                                },
                                "light": {
                                    "description": "The value to use when in rendering in --light or --superlight mode. If not set, the var will be treated as an empty string."
                                },
                                "coerce": {
                                    "type": "string",
                                    "description": "The type to coerce the value to. If not specified, the value is kept as original string from command output.",
                                    "enum": ["json", "str", "int", "float", "bool"]
                                }
                            },
                            "required": ["commands"],
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        }
    },
    "additionalProperties": false,
    "$defs": {
        "task": {
            "type": "object",
            "description": "A task to run.",
            "properties": {
                "commands": {
                    "type": "array",
                    "description": "The cli commands to run. Commands are run from the config file's directory.",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1
                }
            },
            "additionalProperties": false
        }
    }
}
